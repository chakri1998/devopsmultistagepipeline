node {
	environment {
    registry = "chakri1998/dev301"
    registryCredential = 'dockerhub'
  }
 try  {
 notify('Job Started') 
	 
  stage('Git-Checkout') {
   git branch:'master', url:'https://github.com/chakri1998/devopswithbranch.git'
  }
	 
  stage('Input to continue forther') {
   input('git checkout done Do you want to forther proceed?')  
  }
	 
 def project_path="devops/"
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
	 
  stage('Sonar Analysis'){
        withSonarQubeEnv('SonarQube'){
         sh 'mvn sonar:sonar'
        }
        }
	 
  stage("Quality Gate") {
  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}
	 
   stage('Maven-Test') {
   sh label: '', script: 'mvn test'
  }
  
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
   stage('Archive-Artifacts') {
   archiveArtifacts 'target/*.war'
  }
  
   stage('Jfrog Artifacory Upload') {
        def server= Artifactory.server 'Artifactory'
                    def uploadSpec= """{
                        "files": [{
                        "pattern": "target/*.war",
                        "target": "devops"}]
                    }"""
        server.upload(uploadSpec)
        
        }
     
    stage('Jfrog Artifactory download'){
    def server= Artifactory.server 'Artifactory'
    def downloadSpec = """{
    "files": [
    {
      "pattern": "devops/*.war",
      "target": "/home/mtadminnuvepro/artifacts/"
      
    }
    ]
    }"""
    server.download(downloadSpec)
   
}
	 
 stage('Push Docker Image to docker repository') {  
           echo "Building image"
          dockerImage = sudo docker.build registry + ":$BUILD_NUMBER"
          docker.withRegistry( '', registryCredential ) {
		  sudo dockerImage.push()
        }
      }	 

}
notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}

def notify(status){
    emailext (
	to: "chakradhar1998@outlook.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
